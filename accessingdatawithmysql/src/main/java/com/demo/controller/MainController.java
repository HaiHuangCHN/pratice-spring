package com.demo.controller;

import java.sql.Timestamp;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.demo.entity.BodyInfo;
import com.demo.entity.User;
import com.demo.repository.BodyInfoRepository;
import com.demo.repository.UserRepository;
import com.demo.request.UserReq;
import com.demo.response.UserResp;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/jpademo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private BodyInfoRepository bodyInfoRepository;

	@GetMapping(path = "/addUserAndBodyInfo") // Map ONLY GET Requests
	public @ResponseBody String addNewUserAndBodyInfo(@RequestParam String username, @RequestParam String password,
			@RequestParam(required = false) String email, @RequestParam String weight, @RequestParam String hight) {
//		@ResponseBody means the returned String is the response, not a view name
//		@RequestParam means it is a parameter from the GET or POST request, we can add (required = false) in front of the argument if the parameter is not required

		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		BodyInfo bodyInfo = new BodyInfo(weight, hight);
		bodyInfo.setCreatedDate(timestamp);
		bodyInfo.setUpdatedDate(timestamp);
		bodyInfoRepository.save(bodyInfo);
		User user = new User(username, password);
		user.setCreatedDate(timestamp);
		user.setUpdatedDate(timestamp);
		user.setEmail(email);
		user.setBodyInfo(bodyInfo);
		userRepository.save(user);
		return "Saved";
	}

	@GetMapping(path = "/allUsers")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path = "/allBodyInfo")
	public @ResponseBody Iterable<BodyInfo> getAllBodyInfo() {
		// This returns a JSON or XML with the users
		return bodyInfoRepository.findAll();
	}

	@RequestMapping(value = "/getByLastNameAndFirstName1", method = RequestMethod.GET)
	public @ResponseBody List<User> getByLastNameAndFirstName1(@RequestParam String lastName,
			@RequestParam String firstName) {
		// This returns a JSON or XML with the last name given
		List<User> useListrDb = userRepository.findByLastNameAndFirstName1(lastName, firstName);
		return useListrDb;
	}

	@RequestMapping(value = "/getByLastNameAndFirstName2", method = RequestMethod.GET)
	public @ResponseBody Object[] getByLastNameAndFirstName2(@RequestParam String lastName,
			@RequestParam String firstName) {
		// This returns a JSON or XML with the last name given
		List[] array = userRepository.findByLastNameAndFirstName2(lastName, firstName);
		System.out.println(array);
		return array;
	}

	@RequestMapping(value = "/findByUserId/{userId}/test", method = RequestMethod.POST)
	public @ResponseBody List<User> findByUserId(@RequestBody User userreq, @PathVariable("userId") int userId) {
		List<User> userList = userRepository.findByUserId(userId);
		System.out.println(userList);
		return userList;
	}

	@RequestMapping(value = "/getByLastName1", method = RequestMethod.GET)
	public @ResponseBody Iterable<User> getByLastName1(@RequestParam String lastName) {
		return userRepository.findByLastname(lastName);
	}

	@RequestMapping(value = "/getByLastName2", method = RequestMethod.GET)
	public @ResponseBody List<User> getByLastName2(@RequestParam String lastName) {
		// This returns a JSON or XML
		List<User> userList = userRepository.findByLastname2(lastName);
		return userList;
	}

	@RequestMapping(value = "/getByLastName3", method = RequestMethod.GET)
	public @ResponseBody List<User> getByLastName3(@RequestParam String lastName) {
		// This returns a JSON or XML
		List<User> userList = userRepository.findByLastname3(lastName);
		return userList;
	}

	@RequestMapping(value = "/getByLastName4", method = RequestMethod.GET)
	public @ResponseBody List<User> getByLastName4(@RequestParam String lastName) {
		// This returns a JSON or XML
		List<User> userList = userRepository.findByLastname4(lastName);
		return userList;
	}

	@GetMapping(path = "/updateUserGet") // Map ONLY GET Requests
	public @ResponseBody List<User> updateUserGet(@RequestParam String firstName, @RequestParam String lastName,
			@RequestParam String email) {
		List<User> userListDb = userRepository.findByLastNameAndFirstName1(lastName, firstName);
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		for (User user : userListDb) {
			user.setEmail(email);
			user.setUpdatedDate(timestamp);
			userRepository.save(user);
		}
		return userRepository.findByLastNameAndFirstName1(lastName, firstName);
	}

	@PostMapping(path = "/updateUserPost") // Map ONLY POST Requests
	public @ResponseBody ResponseEntity<?> updateUserPost(@Valid @RequestBody UserReq userReq, Errors errors)
			throws Exception {
		// If not add @RequestBody, then the request body will not bound to the request
		// class, so that all the attribute will be null of the request class
		UserResp userResp = new UserResp();
		List<User> userListDb = userRepository.findByLastNameAndFirstName1(userReq.getLastName(),
				userReq.getFirstName());
		if (userListDb.size() == 0) {
			userResp.setErrorMsg("No user found");
		} else if (userListDb.size() > 1) {
			userResp.setErrorMsg("Multi user found");
		} else {
			Timestamp timestamp = new Timestamp(System.currentTimeMillis());
			userListDb.get(0).setEmail(userReq.getEmail());
			userListDb.get(0).setUpdatedDate(timestamp);
			userRepository.save(userListDb.get(0));
			userResp.setFirstName(userReq.getFirstName());
			userResp.setLastName(userReq.getLastName());
			userResp.setErrorMsg("Updated successfully");
		}
		return ResponseEntity.status(HttpStatus.OK).body(userResp);
	}

	@GetMapping(path = "/deleteUser")
	public @ResponseBody String deleteUser(@RequestParam String username, @RequestParam String password) {
		if (userRepository.findByUsernameAndPassword(username, password).size() > 0) {
			List<User> userList = userRepository.findByUsernameAndPassword(username, password);
			for (User user : userList) {
				bodyInfoRepository.deleteById(user.getBodyInfo().getBodyId());
				userRepository.delete(user);
			}
		}
		return "deleted";
	}

}